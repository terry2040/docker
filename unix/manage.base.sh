# This file should be automatically inserted after a few lines of configuration
# generated by the setup script. This comment should not be the first section
# in the generated manage script.

# Check if the work variable is defined and is a valid directory
if [[ -z $work ]]; then
  work=""  # Suppress shellcheck while editing base script
  echo "No work directory is defined! Maybe the manage script was not generated correctly?"
  exit 1
fi

# Check if the work directory exists
if [[ ! -d "${work}" ]]; then
  echo "The work directory specified in the manage script cannot be found!"
  exit 1
fi

# The container ID file should be in the same directory as this script
container="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)/.container"

# Read to see if the container exists and has an ID
function read_container() {
  if [[ -f ${container} ]]; then
    container_id=$(<"${container}")  # Made a local variable wherever this function is called
    if [[ -z ${container_id} ]]; then
      echo "The existing container file is invalid, restart the container."
      rm "${container}"
      exit 1
    fi
  else
    echo "A container doesn't seem to be running..."
    exit 1
  fi
}

# Run the docker image with the root directory and some additional config
function docker_run_command() {
  docker run -v "${work}":/work -d -t --security-opt seccomp:unconfined --cap-add SYS_PTRACE terry2040/csci104 1> "${container}"
}

# A wrapper around run
function docker_run() {
  if [[ ! -f ${container} ]]; then
    if docker_run_command; then
      echo "A container is now running! Use the shell command to open a shell."
    else
      echo "Startup failed, removing the container file."
      rm "${container}"
      exit 1
    fi
  else
    echo "A container seems to be running, use the stop command to stop it."
    exit 1
  fi
}

# Run the docker image with the root directory and enabling more syscalls for runtime tracking
function docker_admin_run_command() {
  docker run -v "${work}":/work -d -t --security-opt seccomp:unconfined --cap-add SYS_ADMIN terry2040/csci104 1> "${container}"
}

# A wrapper around run
function docker_run_test() {
  if [[ ! -f ${container} ]]; then
    if docker_admin_run_command; then
      echo "A testing container is now running! Use the shell command to open a shell."
      echo "WARNING: stop container when finished testing for safety"
    else
      echo "Startup failed, removing the container file."
      rm "${container}"
      exit 1
    fi
  else
    echo "A container seems to be running, use the stop command to stop it."
    exit 1
  fi
}

# Open a bash shell in the container
function docker_shell() {
  read_container
  docker exec -it "${container_id}" zsh
}

# Kill a nactive container
function docker_kill() {
  read_container
  docker kill "${container_id}"
  rm "${container}"
  echo "Container killed."
}

# Interpret args to manage script
if [[ $1 = "start" ]]; then
  docker_run
  exit $?
elif [[ $1 = "test" ]]; then
  docker_run_test
  exit $?
elif [[ $1 = "shell" ]]; then
  docker_shell
elif [[ $1 = "stop" ]]; then
  docker_kill
else
  echo this command manages the virtual linux container
  echo   start - start up the container in the background
  echo   test - start up the container for testing in the background
  echo   shell - open a shell in your running container
  echo   stop - kill the container in the background
fi
